---
title: "class06"
author: "Edward Vo (A16215241)"
format: pdf
---

# All about functions in R

Functions are the way we get stuff done in R. We call a function to read data, compute stuff, plot stuff, etc

R makes writing functions accessible but we should always start by trying to get a working snippet of code first before we write our function.

# Today's lab

We will grade a whole class of student assignments. We will always try to start with a simplified version of the problem. 

Load data
```{r}
# Example input vectors to start with
student1 <-c(100,100,100,100,100,100,100,90)
student2<-c(100,NA,90,90,90,90,97,80)
student3<-c(90,NA,NA,NA,NA,NA,NA,NA)
```

If we want the average, we can use the `mean()` function

```{r}
mean(student1)
```

Let's be nice instructors and drop the lowest score so the answer here should be 100.
I found the `which.min()` function that may be useful here.
```{r}
min(student1)
which.min(student1)
```
```{r}
student1 [8]
# same as
student1[which.min(student1)]
```

I can use the minus syntax trick to get everything but the element with the min value.
```{r}
student1 [-8]
# or generically
student1[-which.min(student1)]
```

I have my first working snippet of code
Average of dropped student
```{r}
mean(student1[-which.min(student1)])
```

Let's test on the other students
```{r}
mean(student2[-which.min(student2)])
```

Where is the problem? 
```{r}
mean(student2)
```

`mean()` with NA input returns NA by default but I can change this
Remove NA
```{r}
mean(student2, na.rm = TRUE)
```

```{r}
mean(student3)
mean(student3, na.rm = TRUE)
```

I want to stop working with `student1` `student2` `student3` and typing it out every time so let's instead work with an input called `x`
```{r}
x <- student2
```

We want to overwrite the NA values with zero - if you miss a homework you score zero on this homework

`is.na` function?
```{r}
x
is.na(x)
```

We can use logicals to index a vector
```{r}
y <- 1:5
y
y>3 
y[y>3]
y[y>3] <- 1000
```

This is my working snippet of code that solves the problem for all my example student inputsr
```{r}
x <- student3

# overwrite NA values to 0
x[is.na(x)] <- 0
x

# remove lowest score
mean(x)
mean(x[-which.min(x)])
```

```{r}
grade <- function(x) {
  # overwrite NA values to 0
  x[is.na(x)] <- 0
  # remove lowest score
  mean(x[-which.min(x)])
}
```

Use this function:
```{r}
grade(student1)
grade(student2)
grade(student3)
```

# Question 1

```{r}
grade <- function(x) {
  # overwrite NA values to 0
  x[is.na(x)] <- 0
  # remove lowest score
  mean(x[-which.min(x)])
}
```

# Question 2

Read the gradebook
```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names = 1)
gradebook
```

```{r}
ans<-apply(gradebook, MARGIN = 1, FUN = "grade")
which.max(apply(gradebook, MARGIN = 1, FUN = "grade"))
```

Student 18 is top score

# Question 3

```{r}
mask <- gradebook
mask[is.na(mask)] <- 0

apply(mask, MARGIN = 2, FUN = "mean")

which.min(apply(mask, MARGIN = 2, FUN = "mean"))
```

Homework 2 is toughest

# Question 4

```{r}
apply(mask, MARGIN = 2, cor, y=ans)
```

```{r}
which.max(apply(mask, MARGIN = 2, cor, y=ans))
```

HW 5 most predictive