---
title: "Class 5 - Data Visualization with ggplot2"
author: "Edward Vo (A16215241)"
format: pdf
---

## Using GGPLOT

The ggplot2 package needs to installed as it does not come with R "out of the box". 

We use the `install.packages()` function to do this.

```{r}
head(cars)
```

To use ggplot I need to load it up before I can calla ny of the functions in the package. I do this with the `library()` function.

```{r}
library(ggplot2)
ggplot()
```

All ggplot figures have at least 3 things:
- data (the stuff we want to plot)
- aesthetic mapping (aes values)
- geoms

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point()
```

ggplot is not the only graphing system in R there are lots of others. There is even "base R" graphics.

```{r}
plot(cars)
```

Show relationship with smooth
```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth()
```

Straight line, no shade
```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(method="lm", se=FALSE)
```

Label & change theme
```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point() +
  labs(title="Speed and Stopping Distances of Cars",
       x="Speed (MPH)", 
       y="Stopping Distance (ft)",
       subtitle = "Your informative subtitle text here",
       caption="Dataset: 'cars'") +
  geom_smooth(method="lm", se=FALSE) +
  theme_bw()
```


# Section 6

Load data
```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

Check # of rows and columns
```{r}
nrow(genes)
ncol(genes)

127/5196
```

Set up genes scatter plot
```{r}
ggplot(genes) + 
    aes(x=Condition1, y=Condition2) +
    geom_point()
```

Add state as metric
```{r}
p <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()
p
```

Change color scheme
```{r}
p + scale_colour_manual( values=c("blue","gray","red") )
```

Add labels
```{r}
p + scale_colour_manual(values=c("blue","gray","red")) +
    labs(title="Gene Expresion Changes Upon Drug Treatment",
         x="Control (no drug) ",
         y="Drug Treatment")
```

# Section 7

Installation
install.packages("gapminder")

```{r}
library(gapminder)
```

```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

Installing dplyr
install.packages("dplyr")

```{r}
library(dplyr)
```

Filter rows with only year 2007
```{r}
gapminder_2007 <- gapminder %>% filter(year==2007)
```

Basic scatter plot 
```{r}
library(ggplot2)
        
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point()
```

Make points transparent
```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.5)
```

Add more variables (colors for contininent, size proportional to population)
```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.5)
```

Gradient population
```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, color = pop) +
  geom_point(alpha=0.8)
```

Adjust point size
```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, size = pop) +
  geom_point(alpha=0.5)
```

New scale
```{r}
ggplot(gapminder_2007) + 
  geom_point(aes(x = gdpPercap, y = lifeExp,
                 size = pop), alpha=0.5) + 
  scale_size_area(max_size = 10)
```

Scaled to population and colored for 1957
```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)

ggplot(gapminder_1957) + 
  aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop) +
  geom_point(alpha=0.7) + 
  scale_size_area(max_size = 10) 
```

Two in one code
```{r}
gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)

ggplot(gapminder_1957) + 
  geom_point(aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop), alpha=0.7) + 
  scale_size_area(max_size = 10) +
  facet_wrap(~year)
```

# Section 8

Load, filter, arrange data
```{r}
gapminder_top5 <- gapminder %>% 
  filter(year==2007) %>% 
  arrange(desc(pop)) %>% 
  top_n(5, pop)

gapminder_top5
```

Simple bar chart
```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop))
```

Color bars
```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop, fill = continent))
```

Life expectancy gradient
```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop, fill = lifeExp))
```

GDP gradient
```{r}
ggplot(gapminder_top5) +
  aes(x=country, y=pop, fill=gdpPercap) +
  geom_col()
```

Ordered GDP gradient
```{r}
ggplot(gapminder_top5) +
  aes(x=reorder(country, -pop), y=pop, fill=gdpPercap) +
  geom_col()
```

Fill by country
```{r}
ggplot(gapminder_top5) +
  aes(x=reorder(country, -pop), y=pop, fill=country) +
  geom_col(col="gray30") +
  guides(fill="none")
```

## Flipping bar charts

Load data
```{r}
head(USArrests)
```

Plot by state
`coord_flip` reverses X and Y axis
```{r}
USArrests$State <- rownames(USArrests)
ggplot(USArrests) +
  aes(x=reorder(State,Murder), y=Murder) +
  geom_col() +
  coord_flip()
```

Custom scaling and aesthetics
```{r}
ggplot(USArrests) +
  aes(x=reorder(State,Murder), y=Murder) +
  geom_point() +
  geom_segment(aes(x=State, 
                   xend=State, 
                   y=0, 
                   yend=Murder), color="blue") +
  coord_flip()
```

# Section 9

install.packages("gganimate")
install.packages("gifski")

library(gapminder)
library(gganimate)
library(ggplot2)

ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  scale_x_log10() +
  facet_wrap(~continent) +
  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
  transition_time(year) +
  shadow_wake(wake_length = 0.1, alpha = FALSE)

# Section 10

Combine many panels

install.packages("patchwork")

```{r}
library(patchwork)

# Setup some example plots 
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec))
p4 <- ggplot(mtcars) + geom_bar(aes(carb))

# Use patchwork to combine them here:
(p1 | p2 | p3) /
      p4
```

